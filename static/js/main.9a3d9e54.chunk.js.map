{"version":3,"sources":["component/AddTask.js","component/Task.js","component/TaskList.js","component/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","date","_this","checked","finishDate","handleDate","e","setState","target","value","handleClick","length","props","addTask","alert","console","log","handleInput","handleImportant","maxDate","react_default","a","createElement","className","type","placeholder","this","onChange","id","htmlFor","name","min","max","onClick","Component","Task","_props$task","task","tekst","active","finichDate","important","style","color","done","delete","time","toLocaleString","TaskList","tasks","filter","tasksActive","map","component_Task","key","tasksDone","counter","App","deleteTask","Object","toConsumableArray","index","findIndex","splice","taskDone","Array","from","forEach","getTime","handleAddTask","concat","component_AddTask","component_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_component_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a3d9e54.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass AddTask extends Component {\r\n    minDate = new Date().toISOString().slice(0,10)\r\n    state = {\r\n        text: '',\r\n        date: this.minDate,\r\n        checked: false,\r\n        finishDate: this.minDate,\r\n    }\r\n\r\n    handleDate = e => {\r\n        this.setState({\r\n            date: e.target.value            \r\n        })\r\n    }\r\n\r\n    handleClick = e => {\r\n        if(this.state.text.length > 2){\r\n        this.props.addTask(this.state) \r\n\r\n          this.setState({\r\n            text: '',\r\n            checked: false,\r\n            date: this.minDate\r\n        })\r\n    } else{\r\n        alert(\"Za krotka nazwa\")\r\n        console.log(\"Za krotka nazwa\")\r\n    }\r\n\r\n    }\r\n\r\n    handleInput = (e) => {\r\n        this.setState({\r\n           text: e.target.value            \r\n        })\r\n    }\r\n\r\n    handleImportant = e =>{\r\n        this.setState({\r\n            checked: e.target.checked            \r\n         })\r\n    }\r\n    render(){\r\n        let maxDate = new Date().toISOString().slice(0,4) * 1 + 1;\r\n        maxDate = maxDate+\"-12-31\";\r\n\r\n    return ( \r\n        <div className=\"form\">\r\n            <input type=\"text\" placeholder=\"dodaj zadanie\" value={this.state.text} onChange={this.handleInput}/>\r\n                        \r\n            <input type=\"checkbox\" id=\"important\" checked={this.state.checked} onChange={this.handleImportant}/>\r\n            <label htmlFor=\"important\">Priorytet</label>\r\n            <br/>\r\n            <label htmlFor=\"date\">Do kiedy zrobić</label>\r\n            <input type=\"date\" name=\"\" id=\"date\" value={this.state.date} min={this.minDate} max={maxDate} onChange={this.handleDate}/>\r\n            <br/>\r\n            <button className=\"addTask\" onClick={this.handleClick}>Dodaj</button>\r\n        </div>\r\n     );}\r\n}\r\n \r\nexport default AddTask;","import React from 'react';\r\n\r\nconst Task = (props) => {\r\n    const color= {\r\n        color: \"red\"\r\n    }\r\n    const {tekst, date, id, active, finichDate, important} = props.task\r\n    if(active){\r\n    return ( \r\n        <div>\r\n            <p>\r\n            {important ? <strong style={color}>{tekst}</strong> : <strong>{tekst}</strong>} - do {date} \r\n             <button onClick={()=>props.done(id)}>Zadanie zrobione</button>\r\n             <button onClick={()=>props.delete(id)}>X</button>\r\n            </p>\r\n        </div>\r\n     );\r\n    } else {\r\n        const time = new Date(finichDate).toLocaleString()\r\n        return ( \r\n            <div>\r\n                <p>\r\n                 <strong>{tekst}</strong> <em>(zrobić do {date})</em> \r\n                <br/>\r\n                - potwierdzenie wykonania {time}\r\n                 <button onClick={()=>props.delete(id)}>X</button>\r\n                </p>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Task;","import React from 'react';\r\nimport Task from './Task';\r\n\r\nconst TaskList = (props) => {\r\n    const active = props.tasks.filter(task => task.active)\r\n    const done = props.tasks.filter(task => !task.active)\r\n    console.log(active, done)\r\n\r\n    const tasksActive = active.map(task => <Task key={task.id} task={task} delete={props.delete} done={props.done}/>)\r\n\r\n    const tasksDone = done.map(task => <Task key={task.id} task={task} delete={props.delete} done={props.done}/>)\r\n\r\n    return ( \r\n        <div>\r\n            <hr/>\r\n            \r\n            <h2>Zadania do zrobienia</h2>\r\n            {tasksActive}\r\n            <hr/>\r\n\r\n            <h3>Zadania zrobione <em>({tasksDone.length})</em></h3>\r\n            {tasksDone.length > 5 ? \"Pokazuje tylko listę ostatnich 5-cu pozycji\" : null}\r\n            {tasksDone.slice(0, 5)}\r\n\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default TaskList;","import React, { Component } from 'react';\nimport './App.css';\nimport AddTask from './AddTask';\nimport TaskList from './TaskList';\n\nlet counter = 9;\nclass App extends Component {\n  state = {\n    tasks: [\n      {\n        id: 0,\n        tekst: \"Zrobić Kurs\",\n        date: \"2019-03-03\",\n        active: true,\n        important: false,\n        finichDate: null\n      },\n      {\n        id: 1,\n        tekst: \"Zrobić Kurs 1\",\n        date: \"2019-03-03\",\n        active: true,\n        important: true,\n        finichDate: null\n      },\n      {\n        id: 2,\n        tekst: \"Zrobić Kurs 2\",\n        date: \"2019-03-03\",\n        active: true,\n        important: true,\n        finichDate: null\n      },\n      {\n        id: 3,\n        tekst: \"Zrobić Kurs 3\",\n        date: \"2019-03-03\",\n        active: true,\n        important: true,\n        finichDate: null\n      },\n      {\n        id: 4,\n        tekst: \"Zrobić Kurs 4\",\n        date: \"2019-03-03\",\n        active: true,\n        important: false,\n        finichDate: null\n      },\n      {\n        id: 5,\n        tekst: \"Zrobić Kurs 5\",\n        date: \"2019-03-03\",\n        active: true,\n        important: true,\n        finichDate: null\n      },\n      {\n        id: 6,\n        tekst: \"Zrobić Kurs 6\",\n        date: \"2019-03-03\",\n        active: true,\n        important: false,\n        finichDate: null\n      },\n      {\n        id: 7,\n        tekst: \"Zrobić Kurs 7\",\n        date: \"2019-03-03\",\n        active: true,\n        important: false,\n        finichDate: null\n      },\n      {\n        id: 8,\n        tekst: \"Zrobić Kurs 8\",\n        date: \"2019-03-03\",\n        active: true,\n        important: true,\n        finichDate: null\n      },\n      {\n        id: 9,\n        tekst: \"Zrobić Kurs 9\",\n        date: \"2019-03-03\",\n        active: true,\n        important: false,\n        finichDate: null\n      }\n\n    ]\n  }\n\n  deleteTask = (id) => {\n    const tasks = [...this.state.tasks]\n    const index = tasks.findIndex(task => task.id === id)\n    tasks.splice(index, 1)\n    this.setState({\n      tasks\n    })\n  }\n\n  taskDone = (id) => {\n    const tasks = Array.from(this.state.tasks)\n    tasks.forEach(task => {\n      if(task.id === id){\n        task.active = false;\n        task.finichDate = new Date().getTime()\n      }\n    })\n    this.setState({\n      tasks\n    })\n }\n\n handleAddTask = (props) => {\n  //  if(props.text.length < 3) return alert(\"Za ma znakow\")\n  const task =  {\n    id: counter + 1,\n    tekst: props.text,\n    date: props.date,\n    active: true,\n    important: props.checked,\n    finishDate: null\n}\ncounter++\nconst tasks = [...this.state.tasks,task]\n\nthis.setState({\n  tasks\n})\n\n   return true\n }\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n      <h2>TO DO APP</h2>\n      <AddTask addTask={this.handleAddTask} tasks={this.state.tasks}/>\n      <TaskList tasks={this.state.tasks} delete={this.deleteTask} done={this.taskDone}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}